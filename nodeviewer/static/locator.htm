<html>
	<head>
		<title>Locator Viewer</title>
		<style>
			* { margin: 0; padding: 0;}
			body { background: #ccc;}
			canvas { width: 100%; height: 100% }
		</style>
	</head>
	<body>
		<script src="./three.min.js"></script>
        <script src="quaternions.js"></script>
        <script src="locator.js"></script>
         <script src="/socket.io/socket.io.js"></script>
<script>
    var scene = new THREE.Scene()

    var socket = io.connect('http://localhost');
    
    var copter = {}
    copter.forward = new THREE.Vector3(0,1,0);
    copter.up = new THREE.Vector3(0,0,1);
    copter.right = new THREE.Vector3();
    copter.right.copy(copter.forward).cross(copter.up)
    copter.right.normalize();


    copter.forwardDisplay = createVector(scene,copter.forward)     
    copter.upDisplay = createVector(scene,copter.up) 
    copter.rightDisplay = createVector(scene,copter.right)     
    
    copter.accel = new THREE.Vector3(0,0,-1);
    copter.accelDisplay = createVector(scene,copter.accel,[0,0.5,1])     
    copter.accelpredicted = new THREE.Vector3(0,0,-1);
    copter.accelpredictedDisplay = createVector(scene,copter.accelpredicted,[0.5,0.5,0.5])     

    copter.magnet = new THREE.Vector3(0,-1,-1);
    copter.magnetDisplay = createVector(scene,copter.magnet,[1,0.5,0])     
    copter.magnetpredicted = new THREE.Vector3(0,0,-1);
    copter.magnetpredictedDisplay = createVector(scene,copter.magnetpredicted,[0.5,0.5,0.5])  

    copter.magnetlock = new THREE.Vector3(-0.5,-1,-1);
    copter.magnetlockDisplay = createVector(scene,copter.magnetlock, [1,0.75,0.25])     

    var magnetlocked = false;
    var magnetlock = new THREE.Vector3(-1,-1,-1);
    var magnetlast = new THREE.Vector3(-1,-1,-1);

    var axis = {}
    axis.forward = new THREE.Vector3(0,1,0);
    axis.up = new THREE.Vector3(0,0,1);
    axis.right = new THREE.Vector3();
    axis.right.copy(axis.forward).cross(axis.up)
    axis.right.normalize();

    axis.forwardDisplay = createVector(scene,axis.forward,[0,0,0])     
    axis.upDisplay = createVector(scene,axis.up,[0,0,0]) 
    axis.rightDisplay = createVector(scene,axis.right,[0,0,0])     

    var m_min = {"x":-707,"y":-717,"z":-461}
	var m_max = {"x":-109,"y":70,"z":123} 

    //var m_min = {x:9999,y:9999,z:9999}
    //var m_max = {x:-9999,y:-9999,z:-9999}
    var oldtime = 0;

    socket.on('locator', function (data) {
        axis.forward = new THREE.Vector3(0,1.0,0);
        axis.up = new THREE.Vector3(0,0,1.0);
        axis.right = new THREE.Vector3();
        axis.right.copy(axis.forward).cross(axis.up)
        axis.right.normalize();



        m_min.x = Math.min(m_min.x, data.mx);
        m_min.y = Math.min(m_min.y, data.my);
        m_min.z = Math.min(m_min.z, data.mz);
        m_max.x = Math.max(m_max.x, data.mx);
        m_max.y = Math.max(m_max.y, data.my);
        m_max.z = Math.max(m_max.z, data.mz);


        copter.magnet.x = (data.mx - m_min.x) / (m_max.x - m_min.x) * 2 - 1.0;
        copter.magnet.y = (data.my - m_min.y) / (m_max.y - m_min.y) * 2 - 1.0;
        copter.magnet.z = (data.mz - m_min.z) / (m_max.z - m_min.z) * 2 - 1.0;

        
        copter.magnet.y *= -1
		//copter.magnet.normalize();


        //console.log(gravity.angleTo(accelvec))

        /*
        var rotatedvec = firstvec.applyAxisAngle(crossvec,aaa);
        rotatedvec.normalize();
        animvec.geometry.vertices[1].x = rotatedvec.x
        animvec.geometry.vertices[1].y = rotatedvec.y
        animvec.geometry.vertices[1].z = rotatedvec.z
        animvec.geometry.verticesNeedUpdate = true;   
        */

        //time

        var deltatime = (data.time - oldtime)/1000000
        oldtime = data.time;
        if (deltatime > 0.1) {
            console.log('Updating clock')
        } else {
            
            var rate = deltatime/100/360*Math.PI*2;
            //console.log(rate)

            copter.up.applyAxisAngle(copter.forward,data.gy*rate)
            copter.right.applyAxisAngle(copter.forward,data.gy*rate)

            copter.up.applyAxisAngle(copter.right,-data.gx*rate)
            copter.forward.applyAxisAngle(copter.right,-data.gx*rate)

            copter.forward.applyAxisAngle(copter.up,-data.gz*rate)
            copter.right.applyAxisAngle(copter.up,-data.gz*rate)

            //APPLY GYRO OFFSET TO ACCELEROMETER VECTOR
            copter.accel = new THREE.Vector3(data.ax,-data.ay,data.az);
            copter.accel.normalize();
            
            var forwarddiff = copter.forward.angleTo( new THREE.Vector3(0,1.0,0) )
            var forwardcross = new THREE.Vector3(0,1.0,0)            
            forwardcross.cross(copter.forward)
            forwardcross.normalize();
            axis.forward.applyAxisAngle(forwardcross,forwarddiff)    
            axis.up.applyAxisAngle(forwardcross,forwarddiff) 
            axis.right.applyAxisAngle(forwardcross,forwarddiff) 
            copter.accel.applyAxisAngle(forwardcross,forwarddiff) 
            copter.magnet.applyAxisAngle(forwardcross,forwarddiff) 
        
            var rightcross = new THREE.Vector3().copy(axis.right)
            rightcross.cross(copter.right)
            rightcross.normalize();
            var rightdiff = axis.right.angleTo( copter.right )
            
            axis.forward.applyAxisAngle(rightcross,rightdiff)    
            axis.up.applyAxisAngle(rightcross,rightdiff) 
            axis.right.applyAxisAngle(rightcross,rightdiff) 
            copter.accel.applyAxisAngle(rightcross,rightdiff) 
            copter.magnet.applyAxisAngle(rightcross,rightdiff) 

            /// CORRECT DRIFT USING ANGLE BETWEEN GRAVITY AND ACCELEROMETER VECTOR                
            var gravity = new THREE.Vector3(0,0,-1.0)
            var gravityerror = gravity.angleTo(copter.accel)
            var gravitycross = new THREE.Vector3();
            gravitycross.copy(copter.accel);
            gravitycross.cross(gravity)
            gravitycross.normalize();

            gravityerror *= 0.05; //SLOWS DOWN CORRECTION

            copter.forward.applyAxisAngle(gravitycross,gravityerror)    
            copter.up.applyAxisAngle(gravitycross,gravityerror) 
            copter.right.applyAxisAngle(gravitycross,gravityerror) 
            copter.accel.applyAxisAngle(gravitycross,gravityerror) 
            copter.magnet.applyAxisAngle(gravitycross,gravityerror) 
            magnetlast.copy(copter.magnet)

            if (magnetlocked) {
	            // USE 'L' key to set magnet lock
	            /// CORRECT DRIFT USING MAGNETOMETER
	            var magnetcross = new THREE.Vector3();
	            magnetcross.copy(copter.magnet)
	            magnetcross.cross(copter.magnetlock)
	            magnetcross.normalize();
	            var magneterror = copter.magnetlock.angleTo(copter.magnet)
	            magneterror *= 0.03;	//SLOWS DOWN CORRECTION

	            copter.forward.applyAxisAngle(magnetcross,magneterror)    
	            copter.up.applyAxisAngle(magnetcross,magneterror) 
	            copter.right.applyAxisAngle(magnetcross,magneterror) 
	            copter.accel.applyAxisAngle(magnetcross,magneterror) 
	            copter.magnet.applyAxisAngle(magnetcross,magneterror) 	
	            
            } else {
            	copter.doMagLock();
            }
            

            




            
           
            copter.update();
            axis.update();

            var m1 = new THREE.Matrix4();
			m1.lookAt( copter.forward, locator.position, copter.up );
			locator.quaternion.setFromRotationMatrix( m1 );

            //UPDATE 3D PIVOT
            //locator.rotation.x += 0.1;
            
        }

        
     });


    
    createAxisGrid(scene)
    //createAxisIcon(scene)
    
    
    
    


    //LOCATOR
    var locator = new THREE.Object3D();
    scene.add(locator)
    locator.useQuaternion = true;
    //createAxisIcon(locator)

    //PLANE
    
    var plane;
    var loader = new THREE.JSONLoader();
    loader.load( "planeobject.js", function(loadeddata) {
        var texture = THREE.ImageUtils.loadTexture( 'texture.jpg' );
        texture.anisotropy = renderer.getMaxAnisotropy();
        var material = new THREE.MeshBasicMaterial( { map: texture } );
        plane = new THREE.Mesh(loadeddata, material);
        plane.scale.x = 0.1;
        plane.scale.y = 0.1;
        plane.scale.z = 0.1;    
        plane.rotation.x = 0
        plane.rotation.y = Math.PI
        //plane.rotation.z = Math.PI/2
        locator.add(plane);
    } );
    

    
 /*
    var origin = new THREE.Vector3(0,0,0)
    var xVec = new THREE.Vector3(1,0,0)
    createVector(scene,xVec)
    var yVec = new THREE.Vector3(0,1,0)
    createVector(scene,yVec)
    var zVec = new THREE.Vector3(0,0,1)
    createVector(scene,zVec)
    */
        
    
    /*
    ///EXPERIMENTS    
    var firstvec = new THREE.Vector3(Math.random()*Math.PI*2,Math.random()*Math.PI*2,Math.random()*Math.PI*2)
    //firstvec.normalize();
    createVector(scene,firstvec)
    var secondvec = new THREE.Vector3(Math.random()*Math.PI*2,Math.random()*Math.PI*2,Math.random()*Math.PI*2)
    secondvec.normalize();
    createVector(scene,secondvec)
    console.log(firstvec.dot(secondvec))
    console.log(firstvec.angleTo(secondvec)/Math.PI*180)    
    

    var addedvec = firstvec.add(secondvec)
    addedvec.normalize();
    createVector(scene,addedvec)
   
    
    var crossvec = firstvec.cross(secondvec)
    crossvec.normalize();
    createVector(scene,crossvec)    

    console.log('test orthagonal')
    console.log(crossvec.dot(firstvec))
    console.log(crossvec.dot(secondvec))


    var rotatedvec = firstvec.applyAxisAngle(crossvec,aaa);
    rotatedvec.normalize();
    animvec = createVector(scene,rotatedvec)        
    
    */

    //create and move our camera
    var cameraPivot = new THREE.Object3D();
    scene.add(cameraPivot)
    scene.fog = new THREE.FogExp2( 0x000000, 0.03 );

    var camera = new THREE.PerspectiveCamera( 90, window.innerWidth / window.innerHeight, 0.1, 10000 )
    camera.position.z = 1
    cameraPivot.add(camera)
    cameraPivot.rotation.y = 0.25
    cameraPivot.rotation.x = 1
    var rendersettings = {}
    rendersettings.antialias = true
    var renderer = new THREE.WebGLRenderer(rendersettings)
    renderer.setSize( window.innerWidth, window.innerHeight );
    document.body.appendChild( renderer.domElement );           
    document.addEventListener( 'mousedown', mouseDown, false );
    document.addEventListener( 'mouseup', mouseUp, false );
    document.addEventListener( 'mousemove', mouseMove, false );
	document.addEventListener( 'keydown', keyDown, false );
    document.addEventListener( 'keyup', keyUp, false );    

    /*
        RENDER FRAMES AND ANIMATE
    */

    var UI = {
        x : 0,
        y : 0,
        leftClick : 0
    }


    function keyDown(key) {
    	console.log(key.keyCode)

    	if (key.keyCode == 76) {
    		// 'L' key locks in new magnetic guide point. this is run automatically on start
 			copter.doMagLock();
    	}
    }

	function keyUp(key) {
    	
    }

    function mouseMove(mouse) {
        //console.log(mouse)
        if (UI.leftClick == 1) {
            cameraPivot.rotation.y -= (mouse.clientX - UI.x)/300;
            cameraPivot.rotation.x -= (mouse.clientY - UI.y)/300;
        }
        UI.x = mouse.clientX;
        UI.y = mouse.clientY;
    }

    function mouseDown(mouse) {
        if (mouse.button == 0) {
            UI.leftClick = 1;
        }

    }

    function mouseUp(mouse) {
        if (mouse.button == 0) {
            UI.leftClick = 0;   
        }
    }

    animate();      //this runs the function animate() below

    function animate() {
        //do your animations in here
    	//camera.rotation.z += 0.01     //adds 0.01 to the current camera rotation in z
        //mesh.rotation.x += 0.03     //adds 0.01 to the current camera rotation in z
        
        // which then just keeps running because of threejs's requestAnimationFrame(animate) 
        requestAnimationFrame( animate );         
        renderer.render( scene, camera );
    }


    /*
        HELPER FUNCTIONS
    */

    copter.doMagLock = function() {
    		//this takes the current magnetic reading and locks it in as a guide point
    		magnetlocked = true;
			console.log("heading locked in")    
			copter.magnetlock.copy(magnetlast)
    }

    copter.update = function() {   
        copter.forward.normalize();
        copter.forwardDisplay.geometry.vertices[1].x = copter.forward.x
        copter.forwardDisplay.geometry.vertices[1].y = copter.forward.y
        copter.forwardDisplay.geometry.vertices[1].z = copter.forward.z
        copter.forwardDisplay.geometry.verticesNeedUpdate = true;

        copter.up.normalize();
        copter.upDisplay.geometry.vertices[1].x = copter.up.x
        copter.upDisplay.geometry.vertices[1].y = copter.up.y
        copter.upDisplay.geometry.vertices[1].z = copter.up.z
        copter.upDisplay.geometry.verticesNeedUpdate = true;    

        copter.right.normalize();
        copter.rightDisplay.geometry.vertices[1].x = copter.right.x
        copter.rightDisplay.geometry.vertices[1].y = copter.right.y
        copter.rightDisplay.geometry.vertices[1].z = copter.right.z
        copter.rightDisplay.geometry.verticesNeedUpdate = true;    

        copter.accel.normalize();
        copter.accelDisplay.geometry.vertices[1].x = copter.accel.x
        copter.accelDisplay.geometry.vertices[1].y = copter.accel.y
        copter.accelDisplay.geometry.vertices[1].z = copter.accel.z
        copter.accelDisplay.geometry.verticesNeedUpdate = true;    

        copter.accelpredicted.normalize();
        copter.accelpredictedDisplay.geometry.vertices[1].x = copter.accelpredicted.x
        copter.accelpredictedDisplay.geometry.vertices[1].y = copter.accelpredicted.y
        copter.accelpredictedDisplay.geometry.vertices[1].z = copter.accelpredicted.z
        copter.accelpredictedDisplay.geometry.verticesNeedUpdate = true;    

        copter.magnet.normalize();
        copter.magnetDisplay.geometry.vertices[1].x = copter.magnet.x
        copter.magnetDisplay.geometry.vertices[1].y = copter.magnet.y
        copter.magnetDisplay.geometry.vertices[1].z = copter.magnet.z
        copter.magnetDisplay.geometry.verticesNeedUpdate = true;    

        copter.magnetpredicted.normalize();
        copter.magnetpredictedDisplay.geometry.vertices[1].x = copter.magnetpredicted.x
        copter.magnetpredictedDisplay.geometry.vertices[1].y = copter.magnetpredicted.y
        copter.magnetpredictedDisplay.geometry.vertices[1].z = copter.magnetpredicted.z
        copter.magnetpredictedDisplay.geometry.verticesNeedUpdate = true;           

        copter.magnetlock.normalize();
        copter.magnetlockDisplay.geometry.vertices[1].x = copter.magnetlock.x
        copter.magnetlockDisplay.geometry.vertices[1].y = copter.magnetlock.y
        copter.magnetlockDisplay.geometry.vertices[1].z = copter.magnetlock.z
        copter.magnetlockDisplay.geometry.verticesNeedUpdate = true;    

    }

axis.update = function() {   
        axis.forward.normalize();
        axis.forwardDisplay.geometry.vertices[1].x = axis.forward.x
        axis.forwardDisplay.geometry.vertices[1].y = axis.forward.y
        axis.forwardDisplay.geometry.vertices[1].z = axis.forward.z
        axis.forwardDisplay.geometry.verticesNeedUpdate = true;

        axis.up.normalize();
        axis.upDisplay.geometry.vertices[1].x = axis.up.x
        axis.upDisplay.geometry.vertices[1].y = axis.up.y
        axis.upDisplay.geometry.vertices[1].z = axis.up.z
        axis.upDisplay.geometry.verticesNeedUpdate = true;    

        axis.right.normalize();
        axis.rightDisplay.geometry.vertices[1].x = axis.right.x
        axis.rightDisplay.geometry.vertices[1].y = axis.right.y
        axis.rightDisplay.geometry.vertices[1].z = axis.right.z
        axis.rightDisplay.geometry.verticesNeedUpdate = true;    

                 
    }

    function rgb(red,green,blue) {
        var r = Math.round( red )
        var g = Math.round( green )
        var b = Math.round( blue )
        return "rgb("+r+","+g+","+b+")"
    }

    function createVector(parent,v,col) {
        //ACCEL - shows which way is down
        //var accel = new THREE.Object3D();
        var vectorgeometry = new THREE.Geometry();
        vectorgeometry.vertices.push(new THREE.Vector3(0, 0, 0));
        vectorgeometry.vertices.push(new THREE.Vector3(v.x, v.y, v.z));
        
        var veccol = new THREE.Color();
        if (col) {
            veccol.setRGB(Math.abs(col[0]), Math.abs(col[1]), Math.abs(col[2]))
        } else {
            var vec = new THREE.Vector3(v.x,v.y,v.z);
            vec.normalize();        
            veccol.setRGB(Math.abs(vec.x), Math.abs(vec.y), Math.abs(vec.z))
        }
        
        var accelline = new THREE.Line(vectorgeometry, new THREE.LineBasicMaterial({
            color: veccol,
            fog:true
        }));

        parent.add(accelline);
        return accelline;
        //parent.add(accel)
    }

    function createLine(parent,v1,v2) {
        var vectorgeometry = new THREE.Geometry();
        vectorgeometry.vertices.push(new THREE.Vector3(v1.x, v1.y, v1.z));
        vectorgeometry.vertices.push(new THREE.Vector3(v2.x, v2.y, v2.z));
        var veccol = new THREE.Color();
        veccol.setRGB(0, 0, 0)
        var accelline = new THREE.Line(vectorgeometry, new THREE.LineBasicMaterial({
            color: veccol
        }));
        parent.add(accelline);
        return vectorgeometry;
    }

    

    function createAxisGrid(parent) {
        var offsetz = -0.005;
        for (var x = -100; x < 100; x++) {
            var geometry = new THREE.Geometry();
            geometry.vertices.push(new THREE.Vector3(x/10, -10, 0 + offsetz));
            geometry.vertices.push(new THREE.Vector3(x/10,  10, 0 + offsetz));
            if (x % 10 == 0) {
                var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                    color: 0x999999
                }));
            } else {
                var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                    color: 0xdddddd
                }));    
            }            
            parent.add(line); 
        }
        for (var y = -100; y < 100; y++) {
            var geometry = new THREE.Geometry();
            geometry.vertices.push(new THREE.Vector3(-10, y/10, 0 + offsetz));
            geometry.vertices.push(new THREE.Vector3( 10, y/10, 0 + offsetz));
            if (y % 10 == 0) {
                var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                    color: 0x999999
                }));
            } else {
                var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                    color: 0xdddddd
                }));    
            }            
            parent.add(line);           
        }   
    }


</script>
	</body>
</html>